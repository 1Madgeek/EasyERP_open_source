var _ = require('lodash');
/**
 *  Represents a Filter Mapper constructor.
 *  Allow __You__ post `filter` generated by UI & then retrieve `filterObject` for mongoose.
 * @constructor
 */

var FilterMapper = function () {
    var FILTER_CONSTANTS = require('../public/js/constants/filters');

    function ConvertType(values, type) {
        var result = {};

        switch (type) {
            case 'ObjectId':
                result.$in = values.objectID();
                break;
            case 'string':
                if (values.indexOf('None') !== -1) {
                    values.push('');
                    values.push(null);
                }

                result.$in = values;
                break;
            case 'integer':
                result.$in = _.map(values, function (element) {
                    return parseInt(element);
                });
                break;
            case 'boolean':
                result.$in = _.map(values, function (element) {
                    return element === 'true';
                });
                break;
            case 'letter':
                result = new RegExp('^[' + values.toLowerCase() + values.toUpperCase() + '].*');
                break;
        }

        return result;
    }

    /**
     * @param {Object} filter Filter generated by UI.
     * @param {Object} filter.* Keys are model fields.
     * @param {String} filter.*.type Type of filter values.
     * @param {Array} filter.*.values Array of filter values.
     * @return {Object} Returns query object.
     */

    this.mapFilter = function (filter, contentType) {
        var filterObject = {};
        var filterValues;
        var filterType;
        var filterBackend;
        var filterConstants = FILTER_CONSTANTS[contentType] || {};
        var filterConstantsByName;

        for (var filterName in filter) {
            filterValues = filter[filterName].value;
            filterType = filter[filterName].type;
            filterBackend = filter[filterName].key;

            filterConstantsByName = filterConstants[filterName] || {};
            filterType = filterType && filterType !== '' ? filterType : filterConstantsByName.type || 'ObjectId';

            filterObject[filterBackend] = ConvertType(filterValues, filterType);
        }

        return filterObject;
    };

};

module.exports = FilterMapper;